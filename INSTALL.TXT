---------------------------------------------
         INSTALLATION OF MTOOLS
---------------------------------------------

The library uses several C++11 specificities and as some of the new 
headers in the STL so you need a fairly recent compiler to build it. 
It also depends a few other libraries:

	- CImg (http://cimg.eu) [image library]
	- fltk (http://www.fltk.org) [gui library]
	- zlib (http://www.zlib.net) [compression library]
	- libpng (http://www.libpng.org) [for reading/writing png images]
	- libjpeg (http://sourceforge.net/projects/libjpeg/) [for reading/writing jpeg images]

----------------------
     On windows
----------------------
[tested on Windows 7 with VS2015RC]

You must install the libraries above before building mtools. Since 
FLTK already bundles zlib, libpng and libjpeg, it suffices to install 
fltk and CImg. The visual studio solution/project files defines both 
32bit and 64bit configurations so the libraries should also provide 
binaries for both platforms if you want to build everything. 

1) Download fltk (http://www.fltk.org), version 1.3.3 or above. 

2) Go in FLTK's /ide/VisualC2010/ subdirectory and open the fltk.sln 
solution with VS2015. Convert as VS2015 project and then build the 
following projects: fltk, fltkdll, fltkimages, fltkzlib, fltkpng, 
fltkjpeg. Each project should be built for both Release and Debug mode. 
Once the projects have been built, the binaries are put in FLTK's /lib/ 
sub-directory except for the .dll files which are put in /test/. 

3) Create a new directory lib32/ at the root of the FLTK source tree 
and move the content of lib/ to this new directory. Add also fltkdll.dll  
and fltkdlld.dll to lib32/ (these file are found in /test/). The directory 
/lib32/ should now contain at least: fltk.lib, fltkd.lib, fltkdll.lib, 
fltkdlld.lib, fltkdll.dll, fltkdlld.dll, fltkimages, fltkimagesd, fltkjpeg.lib, 
fltkjpegd.lib,  fltkpng.lib, fltkpngd.lib, fltkzlib.lib, fltkzlib

4) In order to build mtools for x64, you must also build FLTK for x64
and then, as in the step before, put all the resulting files in a directory
called /lib64/ located as the base of the FLTK source tree. 
Building the 64bit version of FLTK is a bit tricky and it is simpler to use 
using another clean copy of the FLTK source code since you need to create 
the x64 configuration in VS2015 and this results in the same temporary 
directories being shared by the Win32 and x64 configurations which can cause 
conflicts. [You can skip this step if you only want to use the library in 
32bit mode]

5) At that point, FLTK's root directory should contain at least the the following 
sub-directories:
        - /FL/   with the FLTK headers
        - /zlib/ with the zlib headers
        - /png/  with the libpng headers
        - /jpeg/ with the libjpeg headers
        - /lib32/ with the binaries (32 bit) [required for building mtools for win32]
        - /lib64/ with the binaries (64 bit) [required for building mtools for x64]
Now, you must define an global environment variable 'FLTK_LIB' in Windows that 
will indicate where FLTK can be found. To do so, you can directly set 'FLTK_LIB' 
to point to fltk's base directory in windows or you can simply copy the script 
'setEnvVar-fltk.bat' to fltk's root directory  and then run it as administrator.

6) Download CImg (http://cimg.eu) version 1.6.3 or higher. The library is header
only so there is nothing to build, just put the CImg folder wherever you please. 
Again, we must indicate where the library can be found by defining a global env. 
variable called 'CIMG_LIB'. Again ,you can define the env. var. directly or you 
can simply copy the script 'setEnvVar-cimg.bat' to cimg's root directory (i.e. 
the directory containing CImg.h) and then run it as administrator. 

7) Open the mtools.sln file at the root of the mtools source tree with VS2015. 
There are several build configurations:
  - debug/release : Build the mtools library for debug or release purpose.
  - Win32/x64 : Build for 32 or 64 bits.
  - DLL / (nothing) : link mtools against the DLL (or not) version of FLTK.
Hopefully it should build without errors...

8) Set the test project as the start project. It can then be used to test the 
library...

9) The examples/ directory contains simple projects demonstrating how to use
the library. Before, compiling the examples, you must define yet another 
environment variable called 'MTOOLS_LIB' and pointing to the base directory 
of the library (i.e. the directory containing this file). As before, you can 
either define this env. variable directly or alternatively, you can run 
as administrator the 'setEnvVar-mtools.bat' script located as the base
of the mtools directory (you do not need to move the file before running it). 

10) In order to use the library in a Visual Studio project, you must add the 
mtools/headers/ and fltk/ directories to the include path and you must also 
link against the binaries of mtools[32/64][d].lib, fltk[d].lib, libjpeg[d].lib, 
libpng[d].lib and zlib[d].lib. corresponding to the build configuration (ie 
release/debug, Win32/x64).  The simplest way to set up such a project is to 
copy the solution and project files from one of the example in the examples/ 
directory.  

NOTE: If you use mtools::cout in a program before 'main()' even starts (e.g. 
in ctors of global objects), you should probably use the mtools version linked 
against the DLL version of FLTK as it will insure that FLTK  is always properly 
initialized before it is used. otherwise, it is simpler  to just use the mtools 
version linked against the static version of FLTK. Of course, when linking with
th DLL version of fltk, you must link your program against fltkdll.lib/fltkdlld.lib
and make sure that the dlls fltkdll.dll/fltkdlld.dll are in the search path. 


----------------------
      On Linux 
----------------------
[tested on Linux Mint 17.2 with gcc 5.1]

1) Make sure you use a recent version of gcc. Version 4.8 currently bundled with 
Ubuntu (as of 06/15) does no have support for some of the C++11 specificities 
needed to build the library... 

2) Make sure that the required library: fltk, zlib, libpng, libjpeg and CImg are 
installed on the system, up to date, and accessible (in /usr, /usr/local/...).
You need FLTK at least version 1.3.3 (Ubuntu bundles the 1.1 version by default...).

3) Run 'make' in the linux/ sub-directory of the mtools tree and wait/pray. 
This should normally build the library and the test program without error. 
Binaries are then put in the linux/bin/ sub-directory.

4) Once the library is built. You can go into the example directory and type 
'make' inside each project sub-directories to build the examples. 

5) In order to use the library inside one of your own project, just imitate
the instructions in the makefile of one of the example project. 


----------------------
     On OS X
----------------------
Good luck to you :-)
It should 'theorically' work since all the libraries mtools relies on are  
cross-platform but I have never tried...


Have Fun !

