*******************************************************************
*                                                                 *
*                    INSTALLATION OF MTOOLS                       *
*                                                                 *
*******************************************************************

The library depend on a few external libraries which are readily available:

    - CImg (http://cimg.eu) [image library]
    - fltk (http://www.fltk.org) [gui library]
    - zlib (http://www.zlib.net) [compression library]
    - libpng (http://www.libpng.org) [reading/writing png images]
    - libjpeg (http://www.ijg.org/) [reading/writing jpeg images]
    - cairo (http://cairographics.org/) [2D graphics library]

    


*****************************************************
*                    On Windows                     *
*****************************************************
[tested on Windows 7/10 with VS2015 Community]

1) Installation of the external libraries

The repository 'https://github.com/vindar/mtools-dependencies' contain VS2015
builds of all the required library making the process straighforward with Visual
Studio. Just put the 'mtools-dependencies/' folder where you want and then run
the 'setEnvVar-mtools-dependencies.bat' script with admin. rights to create
the environment variables indicating where the librairies are located.


2) Building mtools

First, you must run the 'setEnvVar-mtools.bat'script with admin. rights to
indicate where mtools will be located.

Open the mtools.sln file at the root of the mtools source tree with VS2015.
The solution contain two projects: the library itself and a test project which
can be used for testing the library. Set 'test' as the start project for the
solution (right click on test in the solution window and set it as the start
project). There are several build configurations:

  - debug/release : Build the mtools library for debug or release mode.
  - Win32/x64 : Build for 32 or 64 bits.

Build all the configurations that you wish to use. Hopefully it should compile
without errors... You can now run the test program to test the library.


3) Building the examples.

The examples/ directory contains simple projects demonstrating how to use the
library. Each example has its own VS solution file and should compile for every
configuration for which mtools was build.



*****************************************************
*                     On Linux                      *
*****************************************************
[tested on Linux Mint 17.3 with GCC >= 5.1]

1) Make sure you use a recent version of gcc. Version 5 or later is ok.
   The current version of GCC on Linux Mint is 4.8. You can install the 
   lastest version with:
   
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install gcc-5 g++-5
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 10
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 10
   

2) Make sure that pkg-config and the following libraries are installed: libmesa, 
   libpng, libjpeg,pixman-1, cairo. You can use the following command:
    
        sudo apt-get install python pkg-config libglu1-mesa-dev libpng12-dev libjpeg-dev libpixman-1-dev libcairo2-dev
       
       
3) The version of fltk installed via apt-get is outdated. It is best to build it 
   directly from the sources which can be download at: http://www.fltk.org/. The
   build steps are:
   
        ./configure --enable-threads --enable-cairo
        make
        make install

   The version of CImg installed via apt-get is also outdated. However, the library
   consist of a single header. Just download the latest version from http://cimg.eu 
   and copy the file 'CImg.h' to /usr/local/include.
           
4) cd into mtools's /linux directory and then run 'make'. this will build the library 
   and the test program.
  
5) You can now install the library in /usr/local with 'sudo make install'
   or you can install it somewhere else with 'make install prefix=/my/path'.
   Alternatively, if you do not wish to install the library, you can just
   add the following 3 lines to your .bash_profile/.profile/.bashrc : 
   
       export CPATH="$CPATH:MTOOLSDIR/mtools/headers"
       export PATH="$PATH:MTOOLSDIR/mtools"
       export LIBRARY_PATH="$LIBRARY_PATH:MTOOLSDIR/mtools/linux/lib"
  
  where MTOOLSDIR is the main mtools directory. 
  
6) Once the library is installed, you can build each example separately
   with the 'make' command inside each sud-directory or all the examples 
   simultaneously using the './makeall.sh' command located in the root 
   example/ sub-directory. Use './makeall.sh clean' to clean up everything 
   at once.


   
*****************************************************
*                     On OSX                        *
*****************************************************
[tested on OSX Yosemite with Clang]

I do not know OSX very well but the following steps worked for me...

1) Make sure Xcode is installed with Clang and the corresponding toolchain.


2) Install the libraries mtools depends on: I used homebrew (http://brew.sh)
   to do it and it worked nicely. I used the following command:
   
       brew install python pkg-config glib libpng libjpeg freetype cimg pixman cairo fltk

        
3) By default, the libraries were symlinked to /usr/local which was not 
   in my compiler search path so I needed to add the following two lines
   to my .bash_profile. 
   
       export CPATH="$CPATH:/usr/local/include"
       export LIBRARY_PATH="$LIBRARY_PATH:/usr/local/lib"
       
    
4) Open a new terminal and go to step 4) of the linux build procedure and 
   follow the same steps...


  
*****************************************************
*        Using mtools in a new project              *
*****************************************************

The python script 'mtoolsproject.py' located at the base of the mtools directory
can be used to create an empty project with the correct options. The project
created contain minimal 'main.cpp' file as well as a VS2015 solution for windows
and a makefile for Linux and OSX.



                     **********************************
                     ******* WARNING [ON OSX] *********
                     **********************************
                        
When using mtools on OSX, the programm MUST use the main entry point with signature:

                     int main(int argc, char *argv[])

and the first instruction of main() MUST be:

                     MTOOLS_SWAP_THREADS(argc,argv).
                 
Otherwise, no graphics will be displayed. This macro make it so that main() is
now run on an auxiliary thread (the main thread being used by fltk for displaying
graphics). This means in particular that global objects constructors are not called
with the same thread that run main(). Be careful...

On Windows and Linux, inverting thread is not needed as child threads are allowed
to use the system resources. Therefore, the macro is disabled and does nothing. It
can be omitted but keeping it make the program compatible also with OSX.


                     **********************************

