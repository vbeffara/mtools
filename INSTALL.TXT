*******************************************************************
*                                                                 *
*                    INSTALLATION OF MTOOLS                       *
*                                                                 *
*******************************************************************

The library depend on a few external libraries:

    - CImg (http://cimg.eu) [image library]
    - fltk (http://www.fltk.org) [gui library]
    - zlib (http://www.zlib.net) [compression library]
    - libpng (http://www.libpng.org) [reading/writing png images]
    - libjpeg (http://www.ijg.org/) [reading/writing jpeg images]
    - cairo (http://cairographics.org/) [2D graphics]

and optionally
    
    - openCL (https://www.khronos.org/opencl/) [GPU programming]
    


*****************************************************
*                    On Windows                     *
*****************************************************
[tested on Windows 10 with VS2015 Community]

1) Installation of the external libraries

The repository 'https://github.com/vindar/mtools-dependencies' contain VS2015
builds of all the required library. Copy the 'mtools-dependencies/' folder where 
you want and then run the 'setup-mtools-dependencies.bat' script with admin. rights 
and follow the instructions.

NOTE: In order to use the openCL extension, an openCL SDK (either Intel's, NVIDIA's
or AMD's) must be installed BEFORE running 'setup-mtools-dependencies.bat'. Check
'/openCL/install-howto.txt' for details.


2) Configuring mtools

Run the 'setup-mtools.bat' script located at the root of the mtools source tree
with admin rights to configure the library. 


3) Building the library. 

Open the 'mtools.sln' solution file located at the root of the mtools source tree.
The solution contain two projects: the library itself and a test project. Set 
'test' as the start project for the solution (right click on test in the solution 
window and set it as the start project). The usual build options are a available:

  - debug/release : Build for debug or release mode.
  - Win32/x64 : Build for 32 or 64 bits instruction set.

Build all the configurations needed. Hopefully it should compile without errors. 
You can then now run the test program to check if things are working ok.


4) Building the examples.

They are located in the examples/ directory. The solution file Examples.sln contain 
all the example projects. There is also a .sln for specific to each example inside 
its sub-folder.


*****************************************************
*                     On Linux                      *
*****************************************************
[tested on Ubuntu /Linux Mint]

1) Make sure you use a recent version of gcc. Version 6 or later is needed.
   You can install the lastest version (gcc-7 at the time of writing) with:
   
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install gcc-7 g++-7
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 10
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 10
   

2) Make sure that python, pkg-config and the following libraries are installed:  
   libmesa, libpng, libjpeg, freetype, pixman, cairo. 
    
        sudo apt-get install python pkg-config libfreetype6-dev libglu1-mesa-dev libpng-dev libjpeg-dev libpixman-1-dev libcairo2-dev
       
       
3) The version of fltk installed via apt-get is outdated. It is best to build it 
   directly from the sources which can be download at: http://www.fltk.org/. The
   build steps are:
   
        ./configure --enable-threads --enable-cairo
        make
        sudo make install

		
4) The version of CImg installed via apt-get is also outdated. However, the library
   consist of a single header file. Download the latest version from http://cimg.eu 
   and copy the file 'CImg.h' to /usr/local/include.
  
  
5) cd into mtools root directory and run the script 'setup-mtools.sh' to configure the
   library.

		./setup-mtools.sh
		
6) cd into mtools's /linux sub-directory and then run 
   		
        make
		
   this will build the library and the test program.
  
  
7) You can install the library in /usr/local with the command 

       sudo make install
	   
   or you can install it somewhere else by specifying the install dir with
   
       [sudo] make install prefix=/my/path
	   
   Alternatively, if you do not wish to install the library, you can just
   add the following 3 lines to your .bash_profile/.bashrc : 
   
       export CPATH="$CPATH:MTOOLSDIR/mtools/headers"
       export PATH="$PATH:MTOOLSDIR/mtools"
       export LIBRARY_PATH="$LIBRARY_PATH:MTOOLSDIR/mtools/linux/lib"
  
  where MTOOLSDIR is mtools's directory. 
  
  
8) To build, the examples, run the script:

	../examples/makeall.sh



   
*****************************************************
*                     On OSX                        *
*****************************************************
[tested on OSX High Sierra]


1) Make sure Xcode is installed with Clang and the corresponding toolchain.


2) Install the libraries mtools depends on. I used homebrew (http://brew.sh).
   
       brew install python pkg-config glib libpng libjpeg freetype cimg pixman cairo fltk

        
3) By default, the libraries were symlinked to /usr/local which was not 
   in my compiler search path so I needed to add the following two lines
   to my .bash_profile. 
   
       export CPATH="$CPATH:/usr/local/include"
       export LIBRARY_PATH="$LIBRARY_PATH:/usr/local/lib"

	   
4) Goto step 5 of the linux installation procedure...


  
*****************************************************
*        Using mtools in a new project              *
*****************************************************

The python script 'mtoolsproject.py' located at the base of the mtools directory
can be used to create an empty project with the correct options. The project
created contain a minimal 'main.cpp' file as well as a VS2015 solution for windows
and a makefile for Linux and OSX.



                     **********************************
                     ******* WARNING [ON OSX] *********
                     **********************************
                        
When using mtools on OSX, the programm MUST use the main entry point with signature:

                     int main(int argc, char *argv[])

and the first instruction of main() MUST be:

                     MTOOLS_SWAP_THREADS(argc,argv).
                 
Otherwise, no graphics will be displayed. This macro make it so that main() is
now run on an auxiliary thread (and the main thread is used by fltk for displaying
graphics). This means, in particular, that global objects constructors are not called
with the same thread that run main(), so be careful...

On Windows and Linux, inverting thread is not needed since child threads are allowed
to use the system resources. Thus, the macro is disabled but keeping it is harmless 
while making the program also compatible with OSX.


                     **********************************

