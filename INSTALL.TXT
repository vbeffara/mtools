---------------------------------------------
         INSTALLATION OF MTOOLS
---------------------------------------------

The library depend on a few external libraries:

    - CImg (http://cimg.eu) [image library]
    - fltk (http://www.fltk.org) [gui library]
    - zlib (http://www.zlib.net) [compression library]
    - libpng (http://www.libpng.org) [reading/writing png images]
    - libjpeg (http://www.ijg.org/) [reading/writing jpeg images]
    - cairo (http://cairographics.org/) [2D graphics library]


----------------------
     On windows
----------------------
[tested on Windows 7/10 with VS2015 Community]

1) Installation of the external libraries

The repository 'https://github.com/vindar/mtools-dependencies' contain VS2015 
builds of all the required library making the process straighforward with Visual
Studio. Just put the 'mtools-dependencies/' folder where you want and then run 
the  'setEnvVar-mtools-dependencies.bat' script with admin. rights to create 
the environment variables indicating where the librairies are located. 


2) Building mtools

First, you must run the 'setEnvVar-mtools.bat'script with admin. rights to 
indicate where mtools will be located. 

Open the mtools.sln file at the root of the mtools source tree with VS2015.
The solution contain two projects: the library itself and a test project which
can be used for testing the library. Set 'test' as the start project for the 
solution (right click on test in the solution window and set it as the start 
project). There are several build configurations:

  - debug/release : Build the mtools library for debug or release mode.
  - Win32/x64 : Build for 32 or 64 bits.

Build all the configurations taht you wish to use. Hopefully it should compile 
without  errors... You can now run the test program to try the library.


3) Building the examples.

The examples/ directory contains simple projects demonstrating how to use the 
library. Each example has its own VS solution file and should compile without 
problem for every configuration for which mtools was build.


4) Using mtools in a project.

The example directory also contain the emptyProject.zip template file which 
may be used as a starting project using mtools. 



----------------------
      On Linux
----------------------
[tested on several distribs. with gcc >= 5.1]

1) Make sure you use a recent version of gcc. Version 5 or later is ok.

2) Make sure that the following libraries are installed and accessible:

	- fltk (version 1.3.3 or later, built with --enable-threads and --enable-cairo). 
	- CImg (version 1.6.8). Header only library. 
	- zlib
	- libpng
	- libjpeg
	- cairo (hence also pixman-1)

3) Run 'make' inside the linux/ sub-directory of mtools and wait... This will
build the library and the test program. Use 'make clean' to clean up temporary 
object files prior to rebuilding the whole library.

4) Once the library is built, you must make it itself accessible. 

     - linux/lib/ 	contain the static library.
     - mtools/headers/ 	contain the include files.

You can either add 'linux/lib' directory to LIBRARY_PATH and 'mtools/headers/' to 
CPATH or move both directories to default places in your system (e.g. /usr/local/lib/
and /usr/local/include/). 

5) Once mtools is available, you can build each example separately with the 'make' 
command or all the examples simultaneously using the './makeall.sh' command located 
in the root example/ sub-directory. You can also use './makeall.sh clean' to clean 
all the examples builds. 

6) In order to use mtools in a new project and find the correct configuration flags, 
just adapt the makefile of one of the examples.



----------------------
     On OS X
----------------------

Good luck to you :-) 

It should theoretically work since mtools relies only on the C++  standard headers 
and cross-platform libraries with OS X support but I have never tried so chances 
are something will go wrong...




